[gd_scene load_steps=5 format=3 uid="uid://dbhwug00s4wo0"]

[ext_resource type="Texture2D" uid="uid://cpvo4ct57q2rv" path="res://assets/graphics/ui/select_arrow.png" id="1_53u4j"]
[ext_resource type="LabelSettings" uid="uid://bc0sqo8bbbip3" path="res://assets/resources/ui/text_resources/default_gray.tres" id="2_ls0lr"]
[ext_resource type="LabelSettings" uid="uid://wrhb2r7f2xhy" path="res://assets/resources/ui/text_resources/red.tres" id="3_ls0lr"]

[sub_resource type="GDScript" id="GDScript_53u4j"]
resource_name = "Settings entry spinbox"
script/source = "extends \"res://src/ui/settings/settings_menu_entry.gd\"

@export var starting_value: float
@export var max_value: float = 100.0:
	set(value):
		if not range_node:
			return
		max_value = value
		range_node.max_value = max_value
		_sync()
@export var min_value: float:
	set(value):
		if not range_node:
			return
		min_value = value
		range_node.min_value = min_value
		_sync()
@export var step: float = 1.0:
	set(value):
		if not range_node:
			return
		step = value
		range_node.step = step
		_sync()
@export var content_text: String = \"%s/%s\":
	set(value):
		if not range_node:
			return
		content_text = value
		_sync()
@export var prefix: String = \"\":
	set(value):
		if not range_node:
			return
		prefix = value
		_sync()
@export var content: Label

var range_node: Range


func _init() -> void:
	range_node = Range.new()
	add_child(range_node)


func _ready() -> void:
	super()
	range_node.max_value = max_value
	range_node.min_value = min_value
	range_node.step = step
	range_node.set_value_no_signal(starting_value)
	range_node.value_changed.connect(_on_value_changed)
	content.gui_input.connect(_content_input)
	_sync()


func get_value() -> Variant:
	return range_node.value


func set_value(value: Variant) -> void:
	range_node.set_value_no_signal(value)
	_sync()


func _sync() -> void:
	var val: Variant = int(range_node.value) if range_node.value == int(range_node.value) else range_node.value
	var max_val: Variant = int(range_node.max_value) if range_node.max_value == int(range_node.max_value) else range_node.max_value
	content.text = prefix + content_text % [val, max_val]


func _on_value_changed(_value: float) -> void:
	_sync()
	value_changed.emit()


func _gui_input(event: InputEvent) -> void:
	if event.is_action_pressed(\"ui_right\"):
		range_node.value += range_node.step
	elif event.is_action_pressed(\"ui_left\"):
		range_node.value -= range_node.step


func _content_input(event: InputEvent) -> void:
	if event is InputEventMouseButton:
		if event.button_index == MOUSE_BUTTON_LEFT and not event.pressed:
			if event.position.x > content.size.x / 2.0:
				range_node.value += 1
			else:
				range_node.value -= 1
"

[node name="EntrySpinbox" type="HBoxContainer" node_paths=PackedStringArray("content", "arrow", "label")]
focus_mode = 2
script = SubResource("GDScript_53u4j")
content = NodePath("Content")
arrow = NodePath("Arrow")
label = NodePath("Label")

[node name="Arrow" type="TextureRect" parent="."]
layout_mode = 2
texture = ExtResource("1_53u4j")
stretch_mode = 2

[node name="Label" type="Label" parent="."]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 1
label_settings = ExtResource("2_ls0lr")
vertical_alignment = 1

[node name="Content" type="Label" parent="."]
layout_mode = 2
size_flags_horizontal = 3
mouse_filter = 1
label_settings = ExtResource("3_ls0lr")
horizontal_alignment = 1
vertical_alignment = 1
